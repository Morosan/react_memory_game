{"version":3,"sources":["components/basic/Header/Header.js","sounds/clapping.wav","components/SingleCard/SingleCard.js","data/cardImages.js","App.js","index.js"],"names":["Header","changeDifficulty","resetGame","useState","currentDifficulty","setCurrentDifficulty","useEffect","storedDifficulty","localStorage","getItem","parseInt","mainElement","document","querySelector","classList","remove","add","setItem","toString","handleDifficultyChange","newDifficulty","className","onClick","xmlns","viewBox","d","SingleCard","card","handleChoice","flipped","disabled","border","matched","src","alt","cardImages","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setdisabled","setFlipped","difficulty","setDifficulty","showToMemorize","setTimeout","shuffleCards","slicedImagesByDifficulty","slice","sort","Math","random","map","id","renderCards","console","log","prevCards","resetTurn","prevTurns","checkFlipped","allCardsFlipped","every","Audio","clapping","play","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.50a3714a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst Header = ({ changeDifficulty, resetGame }) => {\r\n  const [currentDifficulty, setCurrentDifficulty] = useState(5);\r\n\r\n  useEffect(() => {\r\n    // Retrieve the difficulty from local storage when the component mounts\r\n    const storedDifficulty = localStorage.getItem('currentDifficulty');\r\n    if (storedDifficulty) {\r\n      setCurrentDifficulty(parseInt(storedDifficulty, 10));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Update the class of the main element based on the current difficulty\r\n    const mainElement = document.querySelector('main');\r\n    mainElement.classList.remove('easy', 'medium', 'hard');\r\n    if (currentDifficulty === 5) {\r\n      mainElement.classList.add('easy');\r\n    } else if (currentDifficulty === 7) {\r\n      mainElement.classList.add('medium');\r\n    } else if (currentDifficulty === 10) {\r\n      mainElement.classList.add('hard');\r\n    }\r\n    \r\n    // Store the current difficulty in local storage\r\n    localStorage.setItem('currentDifficulty', currentDifficulty.toString());\r\n  }, [currentDifficulty]);\r\n\r\n  const handleDifficultyChange = (newDifficulty) => {\r\n    changeDifficulty(newDifficulty);\r\n    setCurrentDifficulty(newDifficulty);\r\n  };\r\n\r\n  return (\r\n      <header className=\"header\">\r\n        <div className=\"logo-wrapper\">\r\n          <h2 className=\"logo\">Memory Game</h2>\r\n          <button className=\"reset-game\" onClick={resetGame}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\"><path d=\"M252.3 11.7c-15.6-15.6-40.9-15.6-56.6 0l-184 184c-15.6 15.6-15.6 40.9 0 56.6l184 184c15.6 15.6 40.9 15.6 56.6 0l184-184c15.6-15.6 15.6-40.9 0-56.6l-184-184zM248 224c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24zM96 248c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm128 80c13.3 0 24 10.7 24 24s-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24zm128-80c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zM224 72c13.3 0 24 10.7 24 24s-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24zm96 392c0 26.5 21.5 48 48 48H592c26.5 0 48-21.5 48-48V240c0-26.5-21.5-48-48-48H472.5c13.4 26.9 8.8 60.5-13.6 82.9L320 413.8V464zm160-88c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24z\"/></svg>\r\n          </button>\r\n        </div>\r\n\r\n      <ul className=\"difficulty-list\">\r\n        <li className=\"difficulty-item\">\r\n          <button onClick={() => handleDifficultyChange(5)}>Easy</button>\r\n        </li>\r\n        <li className=\"difficulty-item\">\r\n          <button onClick={() => handleDifficultyChange(7)}>Medium</button>\r\n        </li>\r\n        <li className=\"difficulty-item\">\r\n          <button onClick={() => handleDifficultyChange(10)}>Hard</button>\r\n        </li>\r\n      </ul>\r\n\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","export default __webpack_public_path__ + \"static/media/clapping.037ef589.wav\";","import React from 'react';\r\n\r\nexport default function SingleCard({ card, handleChoice, flipped, disabled, border }) {\r\n    const handleClick = () => {\r\n        if (!disabled) {\r\n            handleChoice(card);\r\n        }\r\n    }\r\n\r\n    return (\r\n    <div className={`card ${flipped ? \"flipped\" : \"\"} ${card.matched ? \"border\" : \"\"}`}>\r\n        <img src={card.src} alt={card.src} className=\"front\" />\r\n        <img \r\n            src=\"/img/snowflake.jpg\" \r\n            alt=\"card back\" \r\n            className=\"back\" \r\n            onClick={handleClick}\r\n        />\r\n    </div>\r\n  )\r\n}\r\n","export const cardImages = [\r\n  {\r\n    \"src\": \"/img/anna.jpg\",\r\n    \"tag\": \"default\"\r\n  },\r\n  {\r\n    \"src\": \"/img/elsa.jpg\",\r\n    \"tag\": \"default\"\r\n  },\r\n  {\r\n    \"src\": \"/img/kristoff.jpg\",\r\n    \"tag\": \"default\"\r\n  },\r\n  {\r\n    \"src\": \"/img/olaf.jpg\",\r\n    \"tag\": \"default\"\r\n  },\r\n  {\r\n    \"src\": \"/img/sven.jpg\",\r\n    \"tag\": \"default\"\r\n  },\r\n  {\r\n    \"src\": \"/img/hans.jpg\",\r\n    \"tag\": \"default\"\r\n  },\r\n  {\r\n    \"src\": \"/img/oaken.jpg\",\r\n    \"tag\": \"default\"\r\n  },\r\n  {\r\n    \"src\": \"/img/snowgies.jpg\",\r\n    \"tag\": \"default\"\r\n  },\r\n  {\r\n    \"src\": \"/img/bruni.jpg\",\r\n    \"tag\": \"default\"\r\n  },\r\n  {\r\n    \"src\": \"/img/marshmallow.jpg\",\r\n    \"tag\": \"default\"\r\n  },\r\n]","import { useEffect, useState } from 'react';\r\nimport './App.scss'\r\nimport Header from './components/basic/Header/Header'\r\nimport clapping from './sounds/clapping.wav'\r\nimport SingleCard from './components/SingleCard/SingleCard';\r\nimport { cardImages } from './data/cardImages';\r\n\r\nfunction App() {\r\n  const [cards, setCards] = useState([]);\r\n  const [turns, setTurns] = useState(0);\r\n  const [choiceOne, setChoiceOne] = useState(null);\r\n  const [choiceTwo, setChoiceTwo] = useState(null);\r\n  const [disabled, setdisabled] = useState(false);\r\n  const [flipped, setFlipped] = useState(false);\r\n  const [difficulty, setDifficulty] = useState(5);\r\n\r\n  //render cards\r\n  const renderCards = (cards) => {\r\n    setCards(cards);\r\n  }\r\n\r\n  const showToMemorize = () => {\r\n    setFlipped(true);\r\n    setTimeout(() => setFlipped(false), 3000);\r\n  }\r\n\r\n  //shuffle cards \r\n  const shuffleCards = () => {\r\n    const slicedImagesByDifficulty = [...cardImages,]\r\n    .slice(0, difficulty)\r\n    \r\n    const shuffleCards = [...slicedImagesByDifficulty, ...slicedImagesByDifficulty]\r\n    .sort(() => Math.random() - 0.5)\r\n    .map((card) => ({ ...card, id: Math.random()}));\r\n\r\n      setChoiceOne(null);\r\n      setChoiceTwo(null);\r\n      renderCards(shuffleCards);\r\n      setTurns(0);\r\n  }\r\n\r\n  //handle a choice\r\n  const handleChoice = (card) => {\r\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\r\n    console.log(\"handleChoice\");\r\n  }\r\n\r\n  //compare 2 selected cards\r\n  useEffect(() => {\r\n    if (choiceOne && choiceTwo) {\r\n      setdisabled(true);\r\n      \r\n      if (choiceOne.src === choiceTwo.src) {\r\n        setCards(prevCards => {\r\n          return prevCards.map(card => {\r\n            if (card.src === choiceOne.src) {\r\n              return {...card, matched: true, border: true};\r\n            } else {\r\n              return card\r\n            }\r\n          })\r\n        })\r\n        resetTurn()\r\n      } else {\r\n        setTimeout(() => resetTurn(), 1000)\r\n      }\r\n    }\r\n  }, [choiceOne, choiceTwo])\r\n\r\n  // reset choices & increse turn\r\n  const resetTurn = () => {\r\n    setChoiceOne(null)\r\n    setChoiceTwo(null)\r\n    setTurns(prevTurns => prevTurns + 1)\r\n    setdisabled(false);\r\n  }\r\n\r\n  // start clapping function\r\n  const startClapping = () => {\r\n    new Audio(clapping).play()\r\n  }\r\n\r\n  // check if all cards are flipped function\r\n  const checkFlipped = () => {\r\n    const allCardsFlipped = cards.every(card => card.matched === true);\r\n    console.log(\"turns\",turns)\r\n    if (allCardsFlipped && turns !== 0) {\r\n      startClapping()\r\n    }\r\n  }\r\n\r\n  const changeDifficulty = (difficulty) => {\r\n    setDifficulty(difficulty);\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetGame()\r\n  }, [difficulty])\r\n\r\n  // call the checkFlipped\r\n  useEffect(() => {\r\n    checkFlipped()\r\n  }, [choiceOne, choiceTwo, cards])\r\n\r\n  //start a new game automatically\r\n  useEffect(() => {\r\n    shuffleCards()\r\n    showToMemorize()\r\n  }, []) \r\n  \r\n  //start a new game by clicking on the New game button\r\n  const resetGame = () => {\r\n    shuffleCards()\r\n    showToMemorize()\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header\r\n        changeDifficulty={changeDifficulty}\r\n        resetGame={resetGame}\r\n      >\r\n      </Header>\r\n\r\n      <main className=\"card-grid\">\r\n        {cards\r\n          .map(card => (\r\n            <SingleCard \r\n              key={card.id}\r\n              card={card}\r\n              handleChoice={handleChoice}\r\n              flipped={flipped || card === choiceOne || card === choiceTwo || card.matched}\r\n              disabled={disabled}\r\n            />\r\n          ))\r\n          // .slice(0, difficulty)\r\n      }\r\n      </main>\r\n\r\n      <p>Turns: {turns}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}